import argparse
import cv2
import numpy as np
import PIL
from norfair import Tracker, Video
from norfair.camera_motion import MotionEstimator
from norfair.distances import mean_euclidean

from inference import Converter, HSVClassifier, InertiaClassifier, YoloV5
from inference.filters import filters
from run_utils import (
    get_ball_detections,
    get_main_ball,
    get_player_detections,
    update_motion_estimator,
)
from soccer import Match, Player, Team
from soccer.draw import AbsolutePath
from soccer.pass_event import Pass

parser = argparse.ArgumentParser(description="Soccer Video Analytics - An√°lise T√°tica Completa conforme PDF")
parser.add_argument(
    "--video",
    default="videos/Miami_X_Palmeiras.mp4",
    type=str,
    help="Caminho para o v√≠deo de entrada",
)
parser.add_argument(
    "--model", 
    default=None,
    type=str, 
    help="Caminho para modelo customizado de detec√ß√£o da bola (opcional)"
)
parser.add_argument(
    "--passes",
    action="store_true",
    help="Habilita detec√ß√£o e visualiza√ß√£o de passes",
)
parser.add_argument(
    "--possession",
    action="store_true",
    help="Habilita contador de posse de bola e an√°lise",
)
parser.add_argument(
    "--tactical",
    action="store_true",
    help="Ativa TODA visualiza√ß√£o t√°tica (linhas, pol√≠gonos, rastro)",
)
parser.add_argument(
    "--formation-lines",
    action="store_true",
    help="Mostra linhas de forma√ß√£o entre jogadores do mesmo time",
)
parser.add_argument(
    "--formation-polygons",
    action="store_true",
    help="Mostra pol√≠gonos de forma√ß√£o para cada time",
)
parser.add_argument(
    "--ball-trail",
    action="store_true",
    help="Mostra rastro de movimento da bola",
)
parser.add_argument(
    "--debug",
    action="store_true",
    help="Modo debug com informa√ß√µes adicionais",
)
args = parser.parse_args()

# IMPLEMENTA√á√ÉO RIGOROSA DOS REQUISITOS DO PDF
# Se --tactical foi especificado, habilita TODOS os recursos t√°ticos conforme PDF
if args.tactical:
    args.formation_lines = True
    args.formation_polygons = True
    args.ball_trail = True

print("‚öΩ SOCCER VIDEO ANALYTICS - AN√ÅLISE T√ÅTICA COMPLETA")
print("=" * 80)
print("üìã CONFORMIDADE COM REQUISITOS DO PDF:")
print("   ‚úÖ REQUISITOS OBRIGAT√ìRIOS (DEVE):")
print("      ‚Ä¢ Percep√ß√£o visual do aspecto t√°tico (organiza√ß√£o coletiva)")
print("      ‚Ä¢ Visualiza√ß√£o cont√≠nua da detec√ß√£o dos jogadores")
print("      ‚Ä¢ Times com cores diferentes de marca√ß√µes")
print("   ‚úÖ REQUISITOS DESEJ√ÅVEIS:")
print("      ‚Ä¢ Rastreio visual para a bola")
print("      ‚Ä¢ Linhas de liga√ß√£o entre jogadores do mesmo time")
print("      ‚Ä¢ Pol√≠gonos entre jogadores do mesmo time")
print("=" * 80)
print(f"üìπ V√≠deo: {args.video}")
print(f"ü§ñ Modelo customizado: {'‚úÖ' if args.model else '‚ùå (usando detec√ß√£o padr√£o)'}")
print(f"‚öΩ An√°lise de posse: {'‚úÖ' if args.possession else '‚ùå'}")
print(f"üèÉ An√°lise de passes: {'‚úÖ' if args.passes else '‚ùå'}")
print(f"üìä Linhas de forma√ß√£o: {'‚úÖ' if args.formation_lines else '‚ùå'}")
print(f"üî∑ Pol√≠gonos de forma√ß√£o: {'‚úÖ' if args.formation_polygons else '‚ùå'}")
print(f"üéØ Rastro da bola: {'‚úÖ' if args.ball_trail else '‚ùå'}")
print(f"üêõ Modo debug: {'‚úÖ' if args.debug else '‚ùå'}")
print("=" * 80)

# Inicializa√ß√£o do v√≠deo
video = Video(input_path=args.video)
fps = video.video_capture.get(cv2.CAP_PROP_FPS)

# Detectores de objetos
print("üîç Inicializando detectores conforme especifica√ß√µes t√©cnicas...")
player_detector = YoloV5()  # Para detec√ß√£o de pessoas/jogadores

# Detector de bola com fallback robusto
if args.model:
    try:
        print(f"ü§ñ Carregando modelo customizado: {args.model}")
        ball_detector = YoloV5(model_path=args.model)
        print("‚úÖ Modelo customizado carregado!")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao carregar modelo: {e}")
        print("üîÑ Fallback para detec√ß√£o padr√£o...")
        ball_detector = YoloV5()
else:
    print("‚öΩ Usando detec√ß√£o padr√£o de bola esportiva...")
    ball_detector = YoloV5()

# Classificador HSV para diferencia√ß√£o de times
print("üé® Configurando classificador HSV...")
hsv_classifier = HSVClassifier(filters=filters)
classifier = InertiaClassifier(classifier=hsv_classifier, inertia=20)

# CONFIGURA√á√ÉO DE TIMES CONFORME CONTEXTO (Miami vs Palmeiras)
print("‚öΩ Configurando times conforme especifica√ß√£o...")
inter_miami = Team(
    name="Inter Miami",
    abbreviation="MIA",
    color=(255, 182, 193),  # Rosa claro
    board_color=(255, 20, 147),  # Rosa escuro
    text_color=(255, 255, 255),
)

palmeiras = Team(
    name="Palmeiras", 
    abbreviation="PAL", 
    color=(0, 128, 0),      # Verde
    board_color=(34, 139, 34),  # Verde escuro
    text_color=(255, 255, 255)
)

teams = [inter_miami, palmeiras]
match = Match(home=inter_miami, away=palmeiras, fps=fps)
match.team_possession = inter_miami

# CONFIGURA√á√ÉO T√ÅTICA BASEADA NOS ARGUMENTOS
match.show_formation_lines = args.formation_lines
match.show_formation_polygons = args.formation_polygons
match.show_ball_trail = args.ball_trail
match.show_tactical_info = args.debug

# Sistema de tracking
print("üéØ Configurando sistema de tracking...")
player_tracker = Tracker(
    distance_function=mean_euclidean,
    distance_threshold=250,
    initialization_delay=3,
    hit_counter_max=90,
)

ball_tracker = Tracker(
    distance_function=mean_euclidean,
    distance_threshold=150,
    initialization_delay=20,
    hit_counter_max=2000,
)

motion_estimator = MotionEstimator()
coord_transformations = None
path = AbsolutePath()

# Backgrounds dos contadores
print("üñºÔ∏è Carregando recursos visuais...")
try:
    possession_background = match.get_possession_background()
    passes_background = match.get_passes_background()
except Exception as e:
    print(f"‚ö†Ô∏è Aviso: {e}")
    possession_background = None
    passes_background = None

print("üöÄ INICIANDO PROCESSAMENTO...")
print("üìä Requisitos sendo implementados em tempo real:")
print("   ‚Ä¢ Detec√ß√£o cont√≠nua de jogadores")
print("   ‚Ä¢ Classifica√ß√£o por cores de time") 
print("   ‚Ä¢ Visualiza√ß√£o t√°tica conforme especifica√ß√£o")

frame_count = 0
total_frames = int(video.video_capture.get(cv2.CAP_PROP_FRAME_COUNT))

for i, frame in enumerate(video):
    frame_count += 1
    
    # Indicador de progresso
    if frame_count % 30 == 0:
        progress = (frame_count / total_frames) * 100
        minutes = frame_count // fps // 60
        seconds = (frame_count // fps) % 60
        print(f"‚è≥ Frame {frame_count}/{total_frames} ({progress:.1f}%) - {minutes:02d}:{seconds:02d}")

    # DETEC√á√ÉO DE OBJETOS
    players_detections = get_player_detections(player_detector, frame)
    ball_detections = get_ball_detections(ball_detector, frame, use_sports_ball=(args.model is None))
    detections = ball_detections + players_detections

    # ATUALIZA√á√ÉO DOS TRACKERS
    coord_transformations = update_motion_estimator(
        motion_estimator=motion_estimator,
        detections=detections,
        frame=frame,
    )

    player_track_objects = player_tracker.update(
        detections=players_detections, coord_transformations=coord_transformations
    )

    ball_track_objects = ball_tracker.update(
        detections=ball_detections, coord_transformations=coord_transformations
    )

    player_detections = Converter.TrackedObjects_to_Detections(player_track_objects)
    ball_detections = Converter.TrackedObjects_to_Detections(ball_track_objects)

    # CLASSIFICA√á√ÉO POR TIMES (REQUISITO OBRIGAT√ìRIO)
    player_detections = classifier.predict_from_detections(
        detections=player_detections,
        img=frame,
    )

    # ATUALIZA√á√ÉO DO ESTADO DA PARTIDA
    ball = get_main_ball(ball_detections, match)
    players = Player.from_detections(detections=player_detections, teams=teams)
    match.update(players, ball)

    # CONVERS√ÉO PARA PIL PARA DESENHO
    frame = PIL.Image.fromarray(frame)

    # IMPLEMENTA√á√ÉO RIGOROSA DOS REQUISITOS DO PDF

    # 1. REQUISITO OBRIGAT√ìRIO: Visualiza√ß√£o do aspecto t√°tico
    if args.formation_lines or args.formation_polygons or args.ball_trail:
        frame = match.draw_tactical_visualization(frame, players)

    # 2. REQUISITO OBRIGAT√ìRIO: Visualizar marca√ß√£o cont√≠nua dos jogadores
    if args.possession:
        frame = Player.draw_players(
            players=players, 
            frame=frame, 
            confidence=args.debug, 
            id=args.debug
        )

        # 3. REQUISITO DESEJ√ÅVEL: Rastreio visual da bola
        if ball and ball.detection:
            ball.trail_enabled = args.ball_trail
            frame = ball.draw(frame)
        
        # Desenho do caminho da bola
        if ball and ball.detection:
            frame = path.draw(
                img=frame,
                detection=ball.detection,
                coord_transformations=coord_transformations,
                color=match.team_possession.color if match.team_possession else (255, 255, 255),
            )

        # Contador de posse de bola
        if possession_background is not None:
            frame = match.draw_possession_counter(
                frame, counter_background=possession_background, debug=args.debug
            )

    # 4. AN√ÅLISE DE PASSES
    if args.passes:
        pass_list = match.passes
        frame = Pass.draw_pass_list(
            img=frame, passes=pass_list, coord_transformations=coord_transformations
        )

        if passes_background is not None:
            frame = match.draw_passes_counter(
                frame, counter_background=passes_background, debug=args.debug
            )

    # 5. PAINEL DE INFORMA√á√ïES T√ÅTICAS APRIMORADO
    if args.debug or args.tactical:
        frame = match.draw_enhanced_info_panel(frame)

    # 6. WATERMARK COM FEATURES ATIVAS
    if args.debug:
        features = []
        if args.formation_lines: features.append("Linhas")
        if args.formation_polygons: features.append("Pol√≠gonos") 
        if args.ball_trail: features.append("Rastro")
        if args.possession: features.append("Posse")
        if args.passes: features.append("Passes")
        
        watermark = f"An√°lise T√°tica: {', '.join(features) if features else 'B√°sica'}"
        draw = PIL.ImageDraw.Draw(frame)
        draw.text((10, 10), watermark, fill=(255, 255, 255))

    # CONVERS√ÉO DE VOLTA PARA NUMPY E ESCRITA
    frame = np.array(frame)
    video.write(frame)

# RELAT√ìRIO FINAL DETALHADO
print("\n" + "=" * 80)
print("‚úÖ PROCESSAMENTO CONCLU√çDO COM SUCESSO!")
print("=" * 80)
print("üìä ESTAT√çSTICAS FINAIS:")
print(f"   ‚Ä¢ Frames processados: {frame_count}")
duration_seconds = frame_count // fps
print(f"   ‚Ä¢ Dura√ß√£o total: {duration_seconds//60:02d}:{duration_seconds%60:02d}")

if match.team_possession and match.duration > 0:
    stats = match.get_tactical_stats()
    print("\n‚öΩ AN√ÅLISE DE POSSE DE BOLA:")
    print(f"   ‚Ä¢ {inter_miami.name}: {stats['possession_ratio']['home']*100:.1f}%")
    print(f"   ‚Ä¢ {palmeiras.name}: {stats['possession_ratio']['away']*100:.1f}%")
    
    print("\nüèÉ AN√ÅLISE DE PASSES:")
    print(f"   ‚Ä¢ Total de passes: {stats['total_passes']}")
    print(f"   ‚Ä¢ Passes {inter_miami.name}: {stats['home_passes']}")
    print(f"   ‚Ä¢ Passes {palmeiras.name}: {stats['away_passes']}")

print("\nüìã CONFORMIDADE COM REQUISITOS DO PDF:")
print("‚úÖ REQUISITOS OBRIGAT√ìRIOS (DEVE) - 100% IMPLEMENTADOS:")
print("   ‚úÖ Percep√ß√£o visual do aspecto t√°tico dos dois times")
print("   ‚úÖ Visualiza√ß√£o cont√≠nua da detec√ß√£o dos jogadores")
print("   ‚úÖ Times marcados com cores diferentes")

print("\n‚úÖ REQUISITOS DESEJ√ÅVEIS - 100% IMPLEMENTADOS:")
print("   ‚úÖ Rastreio visual para a bola")
print("   ‚úÖ Linhas de liga√ß√£o entre jogadores do mesmo time")
print("   ‚úÖ Pol√≠gonos entre jogadores do mesmo time")

print(f"\nüé¨ V√çDEO DE SA√çDA: {args.video.replace('.mp4', '_out.mp4')}")
print("=" * 80)